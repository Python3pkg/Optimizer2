[options]
# Command to invoke. The parameters are substituted into this string in
# the bracketed locations, i.e. {0} will get substituted with the first parameter
# and so on.
command = ./rosenbrock.py --x "{0}" --y "{1}" --wait 0.1
# Max number of commands to invoke simultaneously
max_launches = 3
# Regular expression to parse the output of the command. The grouped pattern will
# be used as the fittness value and will be minimized. This can be omitted, in
# which case the last line of the output will be used as the fitness value.
result_re = Result: (.*)
# Number of arguments
num_args = 2
# Argument limits in the format [low high]. If omitted, [0, 1] will be used.
limit0 = [-5 5]
limit1 = [-5 5]
# Algorithm to use. Either 'de' (Differential evolution) or 'cont_de' (Continuous DE)
algorithm = de
#~ algorithm = cont_de

[de]
# Population size: ~10x number of parameters, 40+ experiences diminishing returns.
pop_size = 20
# Weighting factor. Omitting it (i.e. using a random one each generation) is recommended.
# factor = 0.8
# Cross-over probability. High for parameter correlations, low for coordinate ascent.
cross = 0.9
# Maximum generation.
max_gen = 50
# Stop when geometric mean of the population variance of individual parameters goes
# below this value. If omitted, it is set to 0.
min_var = 1e-6
# Cross-over strategy. Little effect on optimization.
strategy = rand
#~ strategy = best
# Initial parameter sets to try.
#~ init0 = [0.95 0.95]
#~ init1 = [0.94 0.95]
#~ init2 = [0.95 0.97]

[cont_de]
# Population size: ~10x number of parameters, 40+ experiences diminishing returns.
pop_size = 20
# Weighting factor. Omitting it (i.e. using a random one each generation) is recommended.
# factor = 0.8
# Cross-over probability. High for parameter correlations, low for coordinate ascent.
cross = 0.9
# Maximum number of trials to do
max_trials = 1000
min_var = 1e-6
